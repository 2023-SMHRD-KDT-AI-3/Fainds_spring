# 톰캣 port 번호 설정 
server.port=8089

# 요청 --> F.C. -- POJO
# POJO 로부터 view 이름(ex. "select")받음
# "select" --> ViewResolver --> "/WEb-INF/views/select.jsp"
# ViewResolver의 prefix와 suffix 지정 필요 jsp를 사용한다면 반드시!!
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# MyBatis와 같은 JDBC 프레임워크 Starter를 추가했다면
# ★★반드시 DataSource(DataBase Connection Pool) 설정을 해줘야 한다.!
# 필요한 정보 데이터베이스 
# driver calss 
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# url
spring.datasource.url=jdbc:mysql://project-db-cgi.smhrd.com:3307/fainds_db
# user name
spring.datasource.username=fainds_db
# password
spring.datasource.password=1q2w3e4r

# spring:
#		datasource:
#					password=12345
# :을 .으로 바꾸면 돼~


# Mapper.xml 파일 위치를 지정
mybatis.mapper-locations=com/smhrd/mapper/**.xml
# 이 폴더 안의 모든 xml파일은 mapper라고 알려주는 **임!

# JPA에 대한 상세 설정
# 0. 문법 설정(선택이기는 한데 어지간하면 할것)
#	 어떤 DBMS의 문법으로 SQL문이 작성되길 원하는지 지정
# 	 DBMS문법 → Class 파일로 정의 해둠, 사용하는 DB에 맞는 Class 이름 적어!
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# 1. ddl-auto
# create : 서버가 재시작 될 때마다 다시 테이블 생성
# 		   개발 초기에만 사용 why? 안에 데이터가 계속 초기화 됨
# update : 수정사항만 적용
spring.jpa.hibernate.ddl-auto=update

# 2-1. (선택) 콘솔창에 실행된 SQL문을 출력할 것인지 설정
spring.jpa.show-sql=true

# select ~ from ~ where ~ = "asdf"
# 2-2. (선택) sql문이 출력될 때, 파싱해서 출력할 것인지
spring.jpa.properties.hibernate.format_sql =true

# AWS S3
cloud.aws.credentials.accessKey=
cloud.aws.credentials.secretKey=
cloud.aws.s3.bucket=fainds-bucket
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto=false

# 인코딩
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
